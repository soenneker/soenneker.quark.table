@using System.Threading
@using Microsoft.Extensions.Logging
@using Soenneker.DataTables.Dtos.ServerSideRequest
@using Soenneker.Extensions.Task
@using Soenneker.Extensions.ValueTask
@using Soenneker.Quark.Table.Options
@using Soenneker.Quark.Table.Abstract
@using Soenneker.Utils.Debounce

@inherits ComponentBase
@implements IQuarkTable

<CascadingValue Value="this" IsFixed="true" >
    <CascadingValue Value="@_isLoading" Name="IsLoading" >
        <div id="@ElementId" class="quark-table-wrapper" style="@(Visible ? string.Empty : "visibility:hidden;position:absolute;left:-9999px")" >
            <div class="quark-table-container" >
                @if (!_isLoading && ChildContent == null)
                {
                    <div class="text-center p-4" >
                        <p>No content available</p>
                    </div>
                }
                else
                {
                    <div class="quark-table-with-search" >
                        @if (ChildContent != null)
                        {
                            @ChildContent
                        }
                    </div>
                }
            </div>
        </div>
    </CascadingValue>
</CascadingValue>

@code {

    [Inject]
    private IQuarkTableInterop QuarkTableInterop { get; set; } = null!;

    [Inject]
    private ILogger<QuarkTable> Logger { get; set; } = null!;

    [Parameter]
    public EventCallback OnInitialize { get; set; }

    [Parameter]
    public EventCallback<int> OnPageSizeChanged { get; set; }

    [Parameter]
    public EventCallback<int> OnGoToPage { get; set; }

    [Parameter]
    public EventCallback<QuarkTableOrderEventArgs> OnOrder { get; set; }

    [Parameter]
    public QuarkTableOptions Options { get; set; } = new();

    [Parameter]
    public bool Visible { get; set; } = true;

    [Parameter]
    public bool ShowPageSizeSelector { get; set; } = true;

    [Parameter]
    public int[] PageSizeOptions { get; set; } = [10, 25, 50, 100];

    [Parameter]
    public int MaxPageButtons { get; set; } = 5;

    [Parameter]
    public bool EnableManualHeaderSorting { get; set; }

    [Parameter]
    public int TotalRecords { get; set; }

    [Parameter]
    public EventCallback<DataTableServerSideRequest> OnInteraction { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    public readonly string ElementId = $"quark-table-{Guid.NewGuid():N}";

    // Debug properties
    public int CurrentPage { get; private set; } = 1;

    public int PageSize { get; private set; }

    public int TotalPages { get; private set; }

    public int TotalRecordsCount { get; private set; }

    public bool HasLoadedOnce { get; private set; }

    private readonly Debouncer _debouncer = new();
    private readonly List<DataTableOrderRequest> _currentOrders = [];
    private readonly QuarkTableContinuationTokenPaging _continuationTokenPaging = new();
    private readonly List<QuarkTh> _registeredColumns = [];
    private readonly CancellationTokenSource _cancellationTokenSource = new();

    private string _searchTerm = string.Empty;
    private string? _continuationToken;

    private bool _dataChanged;
    private bool _isLoading;
    private bool _initialized;
    private bool _dataLoaded;
    private bool _hasLoadedOnce; // Flag to track if data has been loaded at least once
    private bool _isUpdatingParameters; // Flag to prevent infinite loops
    private bool _isHandlingManualRequest; // Flag to prevent multiple simultaneous manual requests
    private int _manualRequestCount = 0; // Counter to track manual request calls
    private QuarkTableOptions? _previousOptions;

    public int StartPage
    {
        get
        {
            // Ensure we have valid values
            if (TotalPages <= 0) return 1;
            if (CurrentPage <= 0) return 1;

            // Simple pagination: show a window around the current page
            int halfButtons = Options.MaxPageButtons / 2;
            int start = CurrentPage - halfButtons;

            // Ensure we don't go below page 1
            start = Math.Max(1, start);

            // If we's near the end, adjust to show the last MaxPageButtons pages
            if (start + Options.MaxPageButtons - 1 > TotalPages)
            {
                start = Math.Max(1, TotalPages - Options.MaxPageButtons + 1);
            }

            // Ensure we don't exceed total pages
            if (start > TotalPages) start = TotalPages;

            return start;
        }
    }

    public int EndPage => Math.Min(TotalPages, StartPage + Options.MaxPageButtons - 1);

    protected override async Task OnInitializedAsync()
    {
        PageSize = Options.DefaultPageSize;
        await QuarkTableInterop.Initialize(_cancellationTokenSource.Token).NoSync();

        _initialized = true;
        if (OnInitialize.HasDelegate)
            await OnInitialize.InvokeAsync().NoSync();
    }

    protected override async Task OnParametersSetAsync()
    {
        // Prevent infinite loops by checking if we're already updating parameters
        if (_isUpdatingParameters)
        {
            if (Options.Debug)
                Logger.LogDebug("OnParametersSetAsync called while already updating parameters - skipping");
            return;
        }

        if (Options.Debug)
            Logger.LogDebug("OnParametersSetAsync called: _dataLoaded={DataLoaded}, _initialized={Initialized}, TotalRecords={TotalRecords}, _totalRecords={CurrentTotalRecords}", _dataLoaded, _initialized, TotalRecords, TotalRecordsCount);

        _isUpdatingParameters = true;

        try
        {
            // Update the backing field for Options
            Options = Options;

            // Initialize total records and pages on first parameter set
            if (!_dataLoaded)
            {
                if (Options.Debug)
                    Logger.LogDebug("First parameter set - initializing data");
                TotalRecordsCount = TotalRecords;
                TotalPages = (int) Math.Ceiling((double) TotalRecordsCount / PageSize);

                // Load initial data
                if (OnInteraction.HasDelegate)
                {
                    if (Options.Debug)
                        Logger.LogDebug("Calling HandleManualRequest for initial data load");
                    await HandleManualRequest().NoSync();
                }

                _dataLoaded = true;
            }
            else
            {
                // Check if TotalRecords has changed
                if (TotalRecordsCount != TotalRecords)
                {
                    if (Options.Debug)
                        Logger.LogDebug("TotalRecords changed from {OldTotal} to {NewTotal}", TotalRecordsCount, TotalRecords);
                    TotalRecordsCount = TotalRecords;
                    TotalPages = (int) Math.Ceiling((double) TotalRecordsCount / PageSize);
                    if (Options.Debug)
                        Logger.LogDebug("TotalRecords updated to {TotalRecords}, TotalPages={TotalPages}", TotalRecordsCount, TotalPages);
                }
            }

            // Check if options have changed and trigger reload if needed
            if (_initialized && _previousOptions != null && !Options.Equals(_previousOptions))
            {
                if (Options.Debug)
                    Logger.LogDebug("Options changed - resetting table");
                PageSize = Options.DefaultPageSize;
                CurrentPage = 1;
                // Clear continuation token when options change
                _continuationToken = null;
                _continuationTokenPaging.Reset();
                if (OnInteraction.HasDelegate)
                {
                    await HandleManualRequest().NoSync();
                }
            }

            _previousOptions = Options.Clone();
        }
        finally
        {
            _isUpdatingParameters = false;
        }

        await base.OnParametersSetAsync().NoSync();
    }

    public async Task HandleGoToPage(int page, CancellationToken cancellationToken = default)
    {
        if (page < 1 || page > TotalPages) return;

        CurrentPage = page;
        // Clear continuation token when changing pages
        _continuationToken = null;
        await HandleManualRequest(cancellationToken).NoSync();

        if (OnGoToPage.HasDelegate)
            await OnGoToPage.InvokeAsync(page).NoSync();
    }

    public async Task HandleSearch(string searchTerm, CancellationToken cancellationToken = default)
    {
        if (Options.Debug)
            Logger.LogDebug("HandleSearch called with term: {SearchTerm}", searchTerm);

        _searchTerm = searchTerm;
        CurrentPage = 1; // Reset to first page when searching
        _continuationTokenPaging.Reset(); // Reset continuation token paging when searching
        _continuationToken = null; // Clear continuation token when searching

        await HandleManualRequest(cancellationToken).NoSync();
    }

    public async Task HandleSort(int columnIndex, CancellationToken cancellationToken = default)
    {
        if (!Options.Sortable) return;

        if (Options.Debug)
            Logger.LogDebug("Sorting column by index: {ColumnIndex}", columnIndex);

        // Find existing order for this column
        DataTableOrderRequest? existing = _currentOrders.FirstOrDefault(o => o.Column == columnIndex);
        string? nextDirection = existing?.Dir switch
        {
            "asc" => "desc",
            "desc" => null,
            _ => "asc"
        };

        // Remove existing order for this column
        _currentOrders.RemoveAll(o => o.Column == columnIndex);

        // Add new order if direction is not null
        if (nextDirection != null)
        {
            _currentOrders.Add(new DataTableOrderRequest
            {
                Column = columnIndex,
                Dir = nextDirection
            });

            if (Options.Debug)
                Logger.LogDebug("Added order: Column={Column}, Direction={Direction}", columnIndex, nextDirection);
        }
        else
        {
            if (Options.Debug)
                Logger.LogDebug("Removed order for column {Column}", columnIndex);
        }

        if (Options.Debug)
            Logger.LogDebug("Current orders count: {Count}", _currentOrders.Count);

        CurrentPage = 1;
        // Reset continuation token paging when sorting
        _continuationTokenPaging.Reset();
        _continuationToken = null;
        await HandleManualRequest(cancellationToken).NoSync();

        if (OnOrder.HasDelegate)
        {
            var args = new QuarkTableOrderEventArgs
            {
                Column = $"Column_{columnIndex}",
                Direction = nextDirection ?? string.Empty,
                Orders = _currentOrders.ToList()
            };
            await OnOrder.InvokeAsync(args).NoSync();
        }
    }

    /// <summary>
    /// Gets the current orders
    /// </summary>
    /// <returns>A copy of the current orders</returns>
    public List<DataTableOrderRequest> GetCurrentOrders()
    {
        return _currentOrders.ToList();
    }

    /// <summary>
    /// Sets the orders programmatically and triggers a reload
    /// </summary>
    /// <param name="orders">The orders to set</param>
    /// <param name="cancellationToken">A token to cancel the operation</param>
    public async Task SetOrders(List<DataTableOrderRequest> orders, CancellationToken cancellationToken = default)
    {
        _currentOrders.Clear();
        if (orders != null)
        {
            _currentOrders.AddRange(orders);
        }

        CurrentPage = 1;
        _continuationTokenPaging.Reset();
        _continuationToken = null;
        await HandleManualRequest(cancellationToken).NoSync();
    }

    /// <summary>
    /// Sorts a column by index (for use in manual mode)
    /// </summary>
    /// <param name="columnIndex">The column index to sort</param>
    /// <param name="cancellationToken">A token to cancel the operation</param>
    public async Task SortColumnByIndex(int columnIndex, CancellationToken cancellationToken = default)
    {
        if (!Options.Sortable) return;

        if (Options.Debug)
            Logger.LogDebug("Sorting column by index: {ColumnIndex}", columnIndex);

        // Find existing order for this column
        DataTableOrderRequest? existing = _currentOrders.FirstOrDefault(o => o.Column == columnIndex);
        string? nextDirection = existing?.Dir switch
        {
            "asc" => "desc",
            "desc" => null,
            _ => "asc"
        };

        // Remove existing order for this column
        _currentOrders.RemoveAll(o => o.Column == columnIndex);

        // Add new order if direction is not null
        if (nextDirection != null)
        {
            _currentOrders.Add(new DataTableOrderRequest
            {
                Column = columnIndex,
                Dir = nextDirection
            });
            if (Options.Debug)
                Logger.LogDebug("Added order: Column={Column}, Direction={Direction}", columnIndex, nextDirection);
        }
        else
        {
            if (Options.Debug)
                Logger.LogDebug("Removed order for column {Column}", columnIndex);
        }

        if (Options.Debug)
            Logger.LogDebug("Current orders count: {Count}", _currentOrders.Count);

        CurrentPage = 1;
        // Reset continuation token paging when sorting
        _continuationTokenPaging.Reset();
        _continuationToken = null;
        await HandleManualRequest(cancellationToken).NoSync();

        if (OnOrder.HasDelegate)
        {
            var args = new QuarkTableOrderEventArgs
            {
                Column = $"Column_{columnIndex}",
                Direction = nextDirection ?? string.Empty,
                Orders = _currentOrders.ToList()
            };
            await OnOrder.InvokeAsync(args);
        }
    }

    /// <summary>
    /// Gets the current sort direction for a column index
    /// </summary>
    /// <param name="columnIndex">The column index</param>
    /// <returns>The sort direction ("asc", "desc", or null if not sorted)</returns>
    public string? GetSortDirection(int columnIndex)
    {
        DataTableOrderRequest? order = _currentOrders.FirstOrDefault(o => o.Column == columnIndex);
        return order?.Dir;
    }

    /// <summary>
    /// Gets the CSS class for a column index based on its sort state
    /// </summary>
    /// <param name="columnIndex">The column index</param>
    /// <returns>The CSS class for the sort state</returns>
    public string GetSortClassByIndex(int columnIndex)
    {
        string? direction = GetSortDirection(columnIndex);
        return direction switch
        {
            "asc" => "quark-table-sorted-asc",
            "desc" => "quark-table-sorted-desc",
            _ => string.Empty
        };
    }

    /// <summary>
    /// Gets the sort indicator for a column index
    /// </summary>
    /// <param name="columnIndex">The column index</param>
    /// <returns>The sort indicator (↑, ↓, or ↕)</returns>
    public string GetSortIndicatorByIndex(int columnIndex)
    {
        string? direction = GetSortDirection(columnIndex);
        return direction switch
        {
            "asc" => " ↑",
            "desc" => " ↓",
            _ => " ↕"
        };
    }

    public async Task HandleColumnSort(int columnIndex, CancellationToken cancellationToken = default)
    {
        if (!Options.Sortable) return;

        if (Options.Debug)
            Logger.LogDebug("HandleColumnSort called for column index: {ColumnIndex}", columnIndex);

        // Find existing order for this column
        DataTableOrderRequest? existing = _currentOrders.FirstOrDefault(o => o.Column == columnIndex);
        string? nextDirection = existing?.Dir switch
        {
            "asc" => "desc",
            "desc" => null,
            _ => "asc"
        };

        // Remove existing order for this column
        _currentOrders.RemoveAll(o => o.Column == columnIndex);

        // Add new order if direction is not null
        if (nextDirection != null)
        {
            _currentOrders.Add(new DataTableOrderRequest
            {
                Column = columnIndex,
                Dir = nextDirection
            });
        }

        // Reset to page 1 when sorting
        CurrentPage = 1;
        // Reset continuation token paging when sorting
        _continuationTokenPaging.Reset();
        _continuationToken = null;
        await HandleManualRequest(cancellationToken).NoSync();

        if (OnOrder.HasDelegate)
        {
            var args = new QuarkTableOrderEventArgs
            {
                Column = $"Column_{columnIndex}",
                Direction = nextDirection ?? string.Empty,
                Orders = _currentOrders.ToList()
            };
            await OnOrder.InvokeAsync(args).NoSync();
        }
    }

    public int RegisterColumn(QuarkTh columnHeader)
    {
        // Add the column to our list and return its index
        _registeredColumns.Add(columnHeader);
        int columnIndex = _registeredColumns.Count - 1;

        if (Options.Debug)
            Logger.LogDebug("Registered column {ColumnIndex} for component {ComponentType}", columnIndex, columnHeader.GetType().Name);

        return columnIndex;
    }

    /// <summary>
    /// Builds the columns list for the DataTableServerSideRequest
    /// </summary>
    /// <returns>A list of DataTableColumnRequest objects representing the registered columns</returns>
    private List<DataTableColumnRequest> BuildColumns()
    {
        var columns = new List<DataTableColumnRequest>();
        
        foreach (var column in _registeredColumns)
        {
            columns.Add(new DataTableColumnRequest
            {
                Data = column.Data,
                Name = column.Name ?? column.Data, // Use Name if provided, otherwise fall back to Data
                Searchable = column.Searchable,
                Orderable = column.Sortable
            });
        }
        
        return columns;
    }

    private async Task HandleManualRequest(CancellationToken cancellationToken = default)
    {
        // Prevent multiple simultaneous calls to HandleManualRequest
        if (_isHandlingManualRequest)
        {
            if (Options.Debug)
                Logger.LogDebug("HandleManualRequest called while already handling a request - skipping");
            return;
        }

        // Prevent infinite loops by limiting consecutive calls
        if (_manualRequestCount > 100)
        {
            if (Options.Debug)
                Logger.LogWarning("HandleManualRequest called too many times ({Count}) - possible infinite loop detected", _manualRequestCount);
            return;
        }

        _manualRequestCount++;
        if (Options.Debug)
            Logger.LogDebug("HandleManualRequest called (count: {Count}): Page={Page}, PageSize={PageSize}, SearchTerm='{SearchTerm}'", _manualRequestCount, CurrentPage, PageSize, _searchTerm);

        if (!OnInteraction.HasDelegate)
        {
            if (Options.Debug)
                Logger.LogWarning("HandleManualRequest: No OnInteraction delegate");
            return;
        }

        _isHandlingManualRequest = true;
        _isLoading = true;
        _dataChanged = true;
        await InvokeAsync(StateHasChanged).NoSync();

        try
        {
            // Create a linked cancellation token source to combine the component's token with the passed token
            using var linkedCts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken, _cancellationTokenSource.Token);

            // Calculate the actual start position based on current page
            int actualStart = (CurrentPage - 1) * PageSize;

            // Use continuation token paging to get the appropriate token
            string? continuationToken = _continuationTokenPaging.UpdateVirtualPage(actualStart, PageSize, _continuationToken);

            var request = new DataTableServerSideRequest
            {
                Start = actualStart,
                Length = PageSize,
                Search = !string.IsNullOrEmpty(_searchTerm) ? new DataTableSearchRequest {Value = _searchTerm} : null,
                Order = _currentOrders.Count > 0 ? _currentOrders : null,
                Columns = _registeredColumns.Count > 0 ? BuildColumns() : null,
                ContinuationToken = continuationToken
            };

            if (Options.Debug)
                Logger.LogDebug("Sending request: Start={Start}, Length={Length}, Search='{Search}', ContinuationToken='{Token}'", request.Start, request.Length, request.Search?.Value ?? "null", request.ContinuationToken ?? "null");

            await OnInteraction.InvokeAsync(request).NoSync();
            
            // Mark that we've loaded data at least once after a successful request
            if (!_hasLoadedOnce)
            {
                _hasLoadedOnce = true;
                HasLoadedOnce = true;
                if (Options.Debug)
                    Logger.LogDebug("Set HasLoadedOnce to true after first successful data load");
            }
        }
        catch (OperationCanceledException)
        {
            if (Options.Debug)
                Logger.LogDebug("HandleManualRequest was cancelled");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "HandleManualRequest error: {Message}", ex.Message);
        }
        finally
        {
            _isLoading = false;
            _dataChanged = true;
            _isHandlingManualRequest = false;
            await InvokeAsync(StateHasChanged).NoSync();
        }
    }

    protected override bool ShouldRender()
    {
        bool shouldRender = _dataChanged;
        if (shouldRender)
        {
            if (Options.Debug)
                Logger.LogDebug("ShouldRender returning true - _dataChanged was true");
        }

        _dataChanged = false;
        return shouldRender;
    }

    public async ValueTask DisposeAsync()
    {
        await _debouncer.DisposeAsync().NoSync();
        
        await _cancellationTokenSource.CancelAsync();
        _cancellationTokenSource.Dispose();
    }

    /// <summary>
    /// Clears all current sorting and resets to first page
    /// </summary>
    /// <param name="cancellationToken">A token to cancel the operation</param>
    public async Task ClearSorting(CancellationToken cancellationToken = default)
    {
        _currentOrders.Clear();
        CurrentPage = 1;
        _continuationTokenPaging.Reset();
        _continuationToken = null;
        _manualRequestCount = 0; // Reset the counter
        _registeredColumns.Clear(); // Reset column registration
        _hasLoadedOnce = false; // Reset the loaded flag
        HasLoadedOnce = false;
        await HandleManualRequest(cancellationToken).NoSync();
    }

    /// <summary>
    /// Resets the table to its initial state (clears sorting and goes to first page)
    /// </summary>
    /// <param name="cancellationToken">A token to cancel the operation</param>
    public async Task Reset(CancellationToken cancellationToken = default)
    {
        _currentOrders.Clear();
        CurrentPage = 1;
        _continuationToken = null;
        _continuationTokenPaging.Reset();
        _manualRequestCount = 0; // Reset the counter
        _registeredColumns.Clear(); // Reset column registration
        _hasLoadedOnce = false; // Reset the loaded flag
        HasLoadedOnce = false;
        await HandleManualRequest(cancellationToken).NoSync();
    }

    /// <summary>
    /// Resets the manual request counter (useful for debugging)
    /// </summary>
    public void ResetManualRequestCounter()
    {
        _manualRequestCount = 0;
        if (Options.Debug)
            Logger.LogDebug("Manual request counter reset to 0");
    }

    /// <summary>
    /// Cancels any ongoing operations and resets the loading state
    /// </summary>
    public async Task CancelOperationsAsync()
    {
        if (Options.Debug)
            Logger.LogDebug("Cancelling ongoing operations");
        await _cancellationTokenSource.CancelAsync();
        _isLoading = false;
        _isHandlingManualRequest = false;
        _dataChanged = true;
        await InvokeAsync(StateHasChanged).NoSync();
    }

    /// <summary>
    /// Updates the continuation token paging with response data
    /// </summary>
    /// <param name="recordCount">The number of records in the current response</param>
    /// <param name="continuationToken">The continuation token from the response</param>
    /// <param name="tokenUsedForCurrentPage">The continuation token that was used to reach the current page</param>
    public void UpdateContinuationTokenPaging(int recordCount, string? continuationToken, string? tokenUsedForCurrentPage = null)
    {
        if (Options.Debug)
            Logger.LogDebug("UpdateContinuationTokenPaging called: RecordCount={RecordCount}, Token='{Token}', TokenUsed='{TokenUsed}', TotalRecords={TotalRecords}", recordCount, continuationToken ?? "null", tokenUsedForCurrentPage ?? "null", TotalRecords);

        _continuationTokenPaging.UpdateFromResponse(PageSize, recordCount, continuationToken, tokenUsedForCurrentPage);
        _continuationToken = continuationToken;

        // Only update total records estimate if TotalRecords parameter is not provided (0 or negative)
        // This prevents conflicts between the continuation token paging system and the provided TotalRecords
        if (TotalRecords <= 0)
        {
            int oldTotalRecords = TotalRecordsCount;
            TotalRecordsCount = _continuationTokenPaging.CalculateTotalRecords(PageSize);
            if (Options.Debug)
                Logger.LogDebug("Updated _totalRecords from {OldTotal} to {NewTotal} (TotalRecords parameter is {ParamTotal})", oldTotalRecords, TotalRecordsCount, TotalRecords);
        }
        else
        {
            if (Options.Debug)
                Logger.LogDebug("Keeping _totalRecords as {CurrentTotal} (TotalRecords parameter is {ParamTotal})", TotalRecordsCount, TotalRecords);
        }

        int oldTotalPages = TotalPages;
        TotalPages = (int) Math.Ceiling((double) TotalRecordsCount / PageSize);

        if (Options.Debug)
            Logger.LogDebug("Updated continuation token paging: RecordCount={RecordCount}, Token='{Token}', TotalRecords={TotalRecords}, TotalPages={TotalPages} (was {OldTotalPages})", recordCount, continuationToken ?? "null", TotalRecordsCount, TotalPages, oldTotalPages);
    }

}