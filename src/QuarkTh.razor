@using Soenneker.Extensions.Task
@using Soenneker.Quark.Table.Abstract

@inherits ComponentBase

<th @onclick="HandleClick" 
    class="quark-table-sortable @(Sortable ? GetSortClass() : string.Empty)"
    style="@(Sortable ? "cursor:pointer;" : string.Empty) Style)">
    @ChildContent @(Sortable ? GetSortIndicator() : string.Empty)
</th>

@code {
    [CascadingParameter]
    private IQuarkTable? QuarkTable { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool Sortable { get; set; } = true;

    [Parameter]
    public bool Searchable { get; set; } = true;

    [Parameter]
    public string Style { get; set; } = string.Empty;

    /// <summary>
    /// The property name or field bound to the column's data in the source.
    /// This is used when building DataTableServerSideRequest to specify the column's data locator.
    /// </summary>
    [Parameter]
    public string? Data { get; set; }

    /// <summary>
    /// The human-readable name/identifier for the column.
    /// This is used as the column's content/display name in the DataTableServerSideRequest.
    /// </summary>
    [Parameter]
    public string? Name { get; set; }

    private int _columnIndex = -1;

    protected override void OnInitialized()
    {
        // Register this column with the parent table to get its position
        if (QuarkTable != null)
        {
            _columnIndex = QuarkTable.RegisterColumn(this);
        }
    }

    private async Task HandleClick()
    {
        if (!Sortable || QuarkTable == null) return;

        await QuarkTable.HandleColumnSort(_columnIndex).NoSync();
    }

    private string GetSortClass()
    {
        if (QuarkTable == null) return string.Empty;
        return QuarkTable.GetSortClassByIndex(_columnIndex);
    }

    private string GetSortIndicator()
    {
        if (QuarkTable == null) return " â†•";
        return QuarkTable.GetSortIndicatorByIndex(_columnIndex);
    }
} 