@using Microsoft.Extensions.Logging
@using Soenneker.Utils.Debounce
@using Soenneker.Quark.Table.Abstract

@inherits Soenneker.Quark.Components.Cancellable.CancellableComponent

<div class="quark-table-search">
    <input type="text"
           value="@SearchTerm"
           @oninput="OnSearchInputHandler"
           placeholder="@Placeholder"
           class="quark-table-search-input" />
</div>

@code {
    [Inject]
    private ILogger<QuarkTableSearch> Logger { get; set; } = null!;

    [CascadingParameter]
    private IQuarkTable? QuarkTable { get; set; }

    [Parameter]
    public string SearchTerm { get; set; } = string.Empty;

    [Parameter]
    public EventCallback<string> SearchTermChanged { get; set; }

    [Parameter]
    public EventCallback<string> OnSearch { get; set; }

    [Parameter]
    public string Placeholder { get; set; } = "Search...";

    [Parameter]
    public int DebounceMs { get; set; } = 300;

    private readonly Debouncer _debouncer = new();

    private Task OnSearchInputHandler(ChangeEventArgs e)
    {
        string newSearchTerm = e.Value?.ToString() ?? string.Empty;

        _debouncer.Debounce(DebounceMs, async _ =>
        {
            // First, notify the parent QuarkTable if available
            if (QuarkTable != null)
            {
                await QuarkTable.HandleSearch(newSearchTerm);
            }

            // Then, invoke the OnSearch callback if provided
            if (OnSearch.HasDelegate)
                await OnSearch.InvokeAsync(newSearchTerm);

        }, false, CancellationToken);

        if (SearchTermChanged.HasDelegate)
            return SearchTermChanged.InvokeAsync(newSearchTerm);

        return Task.CompletedTask;
    }

    public override async ValueTask DisposeAsync()
    {
        await base.DisposeAsync();
        await _debouncer.DisposeAsync();
    }
} 