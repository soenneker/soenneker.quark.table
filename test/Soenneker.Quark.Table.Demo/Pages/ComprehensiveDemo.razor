@page "/comprehensive"
@using Microsoft.Extensions.Logging
@using Soenneker.DataTables.Dtos.ServerResponse
@using Soenneker.DataTables.Dtos.ServerSideRequest
@using Soenneker.Quark.Table.Enums
@using Soenneker.Quark.Table.Demo.Services

@inject ILogger<ComprehensiveDemo> Logger
@inject EmployeeService EmployeeService

<PageTitle>Comprehensive Table Demo - QuarkTable</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="/">Home</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Comprehensive Demo</li>
                </ol>
            </nav>
            
            <h1 class="display-4 mb-4">Comprehensive Table Demo</h1>
            <p class="lead mb-4">Complete demonstration of QuarkTable with dynamic headers, column rendering, and event-driven data population.</p>
        </div>
    </div>

    <!-- Table Configuration Controls -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3><i class="fas fa-cogs text-primary"></i> Table Configuration</h3>
                    <p class="text-muted mb-0">Configure table behavior and data source</p>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3 mb-3">
                            <label class="form-label">Data Source</label>
                            <select class="form-select" @bind="selectedDataSource" @bind:event="onchange" @bind:after="OnDataSourceChanged">
                                <option value="employees">Employees</option>
                            </select>
                        </div>
                        <div class="col-md-3 mb-3">
                            <label class="form-label">Page Size</label>
                            <select class="form-select" @bind="pageSize" @bind:event="onchange" @bind:after="OnPageSizeChanged">
                                <option value="5">5 per page</option>
                                <option value="10">10 per page</option>
                                <option value="25">25 per page</option>
                                <option value="50">50 per page</option>
                            </select>
                        </div>
                        <div class="col-md-3 mb-3">
                            <label class="form-label">Search Position</label>
                            <select class="form-select" @bind="searchPosition" @bind:event="onchange" @bind:after="OnSearchPositionChanged">
                                <option value="@SearchPosition.StartValue">Start</option>
                                <option value="@SearchPosition.CenterValue">Center</option>
                                <option value="@SearchPosition.EndValue">End</option>
                            </select>
                        </div>
                        <div class="col-md-3 mb-3">
                            <label class="form-label">Max Page Buttons</label>
                            <select class="form-select" @bind="maxPageButtons" @bind:event="onchange" @bind:after="OnMaxPageButtonsChanged">
                                <option value="3">3 buttons</option>
                                <option value="5">5 buttons</option>
                                <option value="7">7 buttons</option>
                                <option value="10">10 buttons</option>
                            </select>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3 mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="showSearch" @bind:after="OnShowSearchChanged" id="showSearch">
                                <label class="form-check-label" for="showSearch">
                                    Show Search
                                </label>
                            </div>
                        </div>
                        <div class="col-md-3 mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="showPagination" @bind:after="OnShowPaginationChanged" id="showPagination">
                                <label class="form-check-label" for="showPagination">
                                    Show Pagination
                                </label>
                            </div>
                        </div>
                        <div class="col-md-3 mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="showPageSizeSelector" @bind:after="OnShowPageSizeSelectorChanged" id="showPageSizeSelector">
                                <label class="form-check-label" for="showPageSizeSelector">
                                    Show Page Size Selector
                                </label>
                            </div>
                        </div>
                        <div class="col-md-3 mb-3">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" @bind="sortable" @bind:after="OnSortableChanged" id="sortable">
                                <label class="form-check-label" for="sortable">
                                    Enable Sorting
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-8">
            <!-- Main Table -->
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <div>
                        <h3><i class="fas fa-table text-primary"></i> Dynamic Table</h3>
                        <p class="text-muted mb-0">Current data source: <strong>@GetDataSourceDisplayName()</strong></p>
                    </div>
                    <div>
                        <button class="btn btn-outline-primary btn-sm" @onclick="RefreshTable">
                            <i class="fas fa-sync-alt"></i> Refresh
                        </button>
                        <button class="btn btn-outline-success btn-sm" @onclick="ExportData">
                            <i class="fas fa-download"></i> Export
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <QuarkTable @ref="mainTable" 
                                OnServerSideRequest="HandleServerSideRequest"
                                OnSearch="HandleSearch"
                                OnOrder="HandleOrder"
                                OnInitialize="HandleInitialize"
                                OnPageSizeChanged="HandlePageSizeChanged"
                                OnGoToPage="HandleGoToPage"
                                ShowSearch="@showSearch"
                                SearchPlaceholder="@($"Search {GetDataSourceDisplayName()}...")"
                                Options="tableOptions">
                        <LoadingIndicator>
                            <div class="text-center p-4">
                                <div class="spinner-border text-primary" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                                <p class="mt-2 text-muted">Loading @GetDataSourceDisplayName() data...</p>
                            </div>
                        </LoadingIndicator>
                    </QuarkTable>
                </div>
            </div>
        </div>
        
        <div class="col-lg-4">
            <!-- Event Log -->
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h3><i class="fas fa-list-alt text-success"></i> Event Log</h3>
                    <button class="btn btn-sm btn-outline-secondary" @onclick="ClearEventLog">
                        <i class="fas fa-trash"></i> Clear
                    </button>
                </div>
                <div class="card-body">
                    <div class="event-log" style="max-height: 600px; overflow-y: auto;">
                        @if (eventLog.Count == 0)
                        {
                            <div class="text-center text-muted">
                                <i class="fas fa-info-circle fa-2x mb-2"></i>
                                <p>No events yet. Interact with the table to see events here.</p>
                            </div>
                        }
                        else
                        {
                            @foreach (LogEntry logEntry in eventLog.TakeLast(50))
                            {
                                <div class="log-entry @logEntry.Type.ToLower() mb-2 p-2 border-start border-@GetBadgeColor(logEntry.Type)">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div class="flex-grow-1">
                                            <small class="text-muted">@logEntry.Timestamp.ToString("HH:mm:ss.fff")</small>
                                            <span class="badge bg-@GetBadgeColor(logEntry.Type) me-2">@logEntry.Type</span>
                                            <span>@logEntry.Message</span>
                                        </div>
                                    </div>
                                    @if (!string.IsNullOrEmpty(logEntry.Details))
                                    {
                                        <small class="text-muted d-block mt-1">@logEntry.Details</small>
                                    }
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Table Statistics -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3><i class="fas fa-chart-bar text-info"></i> Table Statistics</h3>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3 mb-3">
                            <div class="card bg-primary text-white">
                                <div class="card-body text-center">
                                    <i class="fas fa-search fa-2x mb-2"></i>
                                    <h4>@searchCount</h4>
                                    <p class="mb-0">Search Events</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 mb-3">
                            <div class="card bg-success text-white">
                                <div class="card-body text-center">
                                    <i class="fas fa-sort fa-2x mb-2"></i>
                                    <h4>@sortCount</h4>
                                    <p class="mb-0">Sort Events</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 mb-3">
                            <div class="card bg-info text-white">
                                <div class="card-body text-center">
                                    <i class="fas fa-file-alt fa-2x mb-2"></i>
                                    <h4>@pageCount</h4>
                                    <p class="mb-0">Page Changes</p>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3 mb-3">
                            <div class="card bg-warning text-white">
                                <div class="card-body text-center">
                                    <i class="fas fa-database fa-2x mb-2"></i>
                                    <h4>@dataLoadCount</h4>
                                    <p class="mb-0">Data Loads</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private QuarkTable? mainTable;
    private readonly List<LogEntry> eventLog = [];
    
    // Configuration state
    private string selectedDataSource = "employees";
    private int pageSize = 10;
    private SearchPosition searchPosition = SearchPosition.End;
    private int maxPageButtons = 5;
    private bool showSearch = true;
    private bool showPagination = true;
    private bool showPageSizeSelector = true;
    private bool sortable = true;
    
    // Statistics
    private int searchCount = 0;
    private int sortCount = 0;
    private int pageCount = 0;
    private int dataLoadCount = 0;
    
    // Data generators

    
    // Data storage

    
    public ComprehensiveDemo()
    {
        // EmployeeService will handle data generation
    }
    
    private QuarkTableOptions tableOptions => new()
    {
        Sortable = sortable,
        DefaultPageSize = pageSize,
        PageSizeOptions = [5, 10, 25, 50],
        ShowPageSizeSelector = showPageSizeSelector,
        ShowSearch = showSearch,
        SearchPlaceholder = GetSearchPlaceholder(),
        SearchDebounceMs = 300,
        SearchPosition = searchPosition,
        ShowPagination = showPagination,
        MaxPageButtons = maxPageButtons,
        ServerSide = true,
        ShowInfo = true
    };
    
    protected override async Task OnInitializedAsync()
    {
        LogEvent("INFO", "Comprehensive demo initialized", "EmployeeService ready");
    }
    
    private string GetDataSourceDisplayName() => "Employees";
    
    private string GetSearchPlaceholder() => $"Search {GetDataSourceDisplayName()}...";
    
    private async Task<DataTableServerResponse> HandleServerSideRequest(DataTableServerSideRequest serverSideRequest)
    {
        dataLoadCount++;
        LogEvent("DATA", "Server-side request", $"Page: {serverSideRequest.Start / serverSideRequest.Length + 1}, Size: {serverSideRequest.Length}, Search: '{serverSideRequest.Search?.Value}'");
        
        return await EmployeeService.GetEmployees(serverSideRequest);
    }
    
    private int GetTotalRecords() => EmployeeService.GetTotalCount();
    
    private int GetFilteredRecords(DataTableServerSideRequest serverSideRequest)
    {
        if (string.IsNullOrEmpty(serverSideRequest.Search?.Value))
            return GetTotalRecords();
            
        string searchTerm = serverSideRequest.Search.Value.ToLower();
        return EmployeeService.GetAllEmployees().Count(e => 
            e.Name.ToLower().Contains(searchTerm) ||
            e.Department.ToLower().Contains(searchTerm) ||
            e.Email.ToLower().Contains(searchTerm) ||
            e.Status.ToLower().Contains(searchTerm));
    }
    
    // Event handlers
    private async Task HandleSearch(string searchTerm)
    {
        searchCount++;
        LogEvent("SEARCH", "Search performed", $"Term: '{searchTerm}'");
        await Task.CompletedTask;
    }
    
    private async Task HandleOrder(QuarkTableOrderEventArgs args)
    {
        sortCount++;
        LogEvent("SORT", "Column sorted", $"Column: {args.Column}, Direction: {args.Direction}");
        await Task.CompletedTask;
    }
    
    private async Task HandleInitialize()
    {
        LogEvent("INIT", "Table initialized", $"Data source: {GetDataSourceDisplayName()}");
        await Task.CompletedTask;
    }
    
    private async Task HandlePageSizeChanged(int newPageSize)
    {
        LogEvent("PAGE_SIZE", "Page size changed", $"New size: {newPageSize}");
        await Task.CompletedTask;
    }
    
    private async Task HandleGoToPage(int page)
    {
        pageCount++;
        LogEvent("PAGE", "Page changed", $"New page: {page}");
        await Task.CompletedTask;
    }
    
    // Configuration change handlers
    private async Task OnDataSourceChanged()
    {
        LogEvent("CONFIG", "Data source changed", $"New source: {GetDataSourceDisplayName()}");
        StateHasChanged();
    }
    
    private async Task OnPageSizeChanged()
    {
        LogEvent("CONFIG", "Page size changed", $"New size: {pageSize}");
        StateHasChanged();
    }
    
    private async Task OnSearchPositionChanged()
    {
        LogEvent("CONFIG", "Search position changed", $"New position: {searchPosition}");
        StateHasChanged();
    }
    
    private async Task OnMaxPageButtonsChanged()
    {
        LogEvent("CONFIG", "Max page buttons changed", $"New max: {maxPageButtons}");
        StateHasChanged();
    }
    
    private async Task OnShowSearchChanged()
    {
        LogEvent("CONFIG", "Show search changed", $"New value: {showSearch}");
        StateHasChanged();
    }
    
    private async Task OnShowPaginationChanged()
    {
        LogEvent("CONFIG", "Show pagination changed", $"New value: {showPagination}");
        StateHasChanged();
    }
    
    private async Task OnShowPageSizeSelectorChanged()
    {
        LogEvent("CONFIG", "Show page size selector changed", $"New value: {showPageSizeSelector}");
        StateHasChanged();
    }
    
    private async Task OnSortableChanged()
    {
        LogEvent("CONFIG", "Sortable changed", $"New value: {sortable}");
        StateHasChanged();
    }
    
    // Utility methods
    private async Task RefreshTable()
    {
        LogEvent("ACTION", "Table refresh", "Manual refresh triggered");
        StateHasChanged();
    }
    
    private async Task ExportData()
    {
        LogEvent("ACTION", "Data export", $"Exporting {GetDataSourceDisplayName()} data");
        // In a real application, this would trigger a download
        await Task.CompletedTask;
    }
    
    private void ClearEventLog()
    {
        eventLog.Clear();
        searchCount = 0;
        sortCount = 0;
        pageCount = 0;
        dataLoadCount = 0;
        LogEvent("ACTION", "Event log cleared", "All events and statistics reset");
    }
    
    private void LogEvent(string type, string message, string details = "")
    {
        eventLog.Add(new LogEntry
        {
            Type = type,
            Message = message,
            Details = details,
            Timestamp = DateTime.Now
        });
        
        StateHasChanged();
    }
    
    private string GetBadgeColor(string type) => type.ToUpper() switch
    {
        "INFO" => "info",
        "SEARCH" => "primary",
        "SORT" => "success",
        "PAGE" => "warning",
        "DATA" => "secondary",
        "CONFIG" => "info",
        "ACTION" => "danger",
        "INIT" => "success",
        _ => "secondary"
    };
    

    
    public class LogEntry
    {
        public string Type { get; set; } = "";
        public string Message { get; set; } = "";
        public string Details { get; set; } = "";
        public DateTime Timestamp { get; set; }
    }
} 