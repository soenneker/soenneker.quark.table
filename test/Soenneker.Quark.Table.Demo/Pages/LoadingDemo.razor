@page "/loading-demo"

<h3>Loading Behavior Demo</h3>

<p>This demo showcases the improved loading behavior. The table content stays visible while a loading overlay appears, preventing the jarring flickering effect.</p>

<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h4>Employee Directory</h4>
                <p class="text-muted mb-0">Try searching, sorting, or changing pages to see the smooth loading overlay</p>
            </div>
            <div class="card-body">
                <QuarkTable @ref="tableRef" 
                            TotalRecords="100">
                    
                    <QuarkTableElement>
                        <QuarkThead>
                            <QuarkTr>
                                <QuarkTh ColumnIndex="0" ColumnName="Name" Sortable="true">Name</QuarkTh>
                                <QuarkTh ColumnIndex="1" ColumnName="Email" Sortable="true">Email</QuarkTh>
                                <QuarkTh ColumnIndex="2" ColumnName="Age" Sortable="true">Age</QuarkTh>
                                <QuarkTh ColumnIndex="3" ColumnName="Department" Sortable="false">Department</QuarkTh>
                                <QuarkTh ColumnIndex="4" ColumnName="Salary" Sortable="true">Salary</QuarkTh>
                            </QuarkTr>
                        </QuarkThead>
                        
                        <QuarkTbody>
                            @if (tableData != null)
                            {
                                @foreach (List<string> row in tableData)
                                {
                                    <QuarkTr Key="@row[0]">
                                        <QuarkTd>@row[0]</QuarkTd>
                                        <QuarkTd>@row[1]</QuarkTd>
                                        <QuarkTd>@row[2]</QuarkTd>
                                        <QuarkTd>@row[3]</QuarkTd>
                                        <QuarkTd>@row[4]</QuarkTd>
                                    </QuarkTr>
                                }
                            }
                        </QuarkTbody>
                    </QuarkTableElement>
                </QuarkTable>
            </div>
        </div>
    </div>
</div>

@code {
    private QuarkTable? tableRef;
    private List<Employee> employees = new();
    private List<List<string>>? tableData;

    protected override void OnInitialized()
    {
        // Sample employee data
        employees = new List<Employee>
        {
            new Employee { Id = 1, Name = "John Doe", Email = "john@example.com", Age = 30, Department = "Engineering", Salary = 75000 },
            new Employee { Id = 2, Name = "Jane Smith", Email = "jane@example.com", Age = 25, Department = "Marketing", Salary = 65000 },
            new Employee { Id = 3, Name = "Bob Johnson", Email = "bob@example.com", Age = 35, Department = "Sales", Salary = 80000 },
            new Employee { Id = 4, Name = "Alice Brown", Email = "alice@example.com", Age = 28, Department = "Engineering", Salary = 70000 },
            new Employee { Id = 5, Name = "Charlie Wilson", Email = "charlie@example.com", Age = 32, Department = "HR", Salary = 60000 },
            new Employee { Id = 6, Name = "Diana Prince", Email = "diana@example.com", Age = 29, Department = "Engineering", Salary = 85000 },
            new Employee { Id = 7, Name = "Eve Adams", Email = "eve@example.com", Age = 27, Department = "Marketing", Salary = 62000 },
            new Employee { Id = 8, Name = "Frank Miller", Email = "frank@example.com", Age = 33, Department = "Sales", Salary = 72000 },
            new Employee { Id = 9, Name = "Grace Lee", Email = "grace@example.com", Age = 31, Department = "HR", Salary = 58000 },
            new Employee { Id = 10, Name = "Henry Davis", Email = "henry@example.com", Age = 26, Department = "Engineering", Salary = 68000 },
            new Employee { Id = 11, Name = "Ivy Chen", Email = "ivy@example.com", Age = 34, Department = "Engineering", Salary = 90000 },
            new Employee { Id = 12, Name = "Jack Wilson", Email = "jack@example.com", Age = 31, Department = "Marketing", Salary = 68000 },
            new Employee { Id = 13, Name = "Kate Martinez", Email = "kate@example.com", Age = 29, Department = "Sales", Salary = 75000 },
            new Employee { Id = 14, Name = "Liam O'Connor", Email = "liam@example.com", Age = 27, Department = "Engineering", Salary = 72000 },
            new Employee { Id = 15, Name = "Maya Patel", Email = "maya@example.com", Age = 33, Department = "HR", Salary = 65000 }
        };
    }

    private async Task<DataTableServerResponse> HandleServerSideRequest(DataTableServerSideRequest request)
    {
        // Simulate server-side processing with a longer delay to showcase the loading
        await Task.Delay(800);

        IQueryable<Employee> filteredEmployees = employees.AsQueryable();

        // Apply search
        if (!string.IsNullOrEmpty(request.Search?.Value))
        {
            string searchTerm = request.Search.Value.ToLower();
            filteredEmployees = filteredEmployees.Where(p => 
                p.Name.ToLower().Contains(searchTerm) ||
                p.Email.ToLower().Contains(searchTerm) ||
                p.Department.ToLower().Contains(searchTerm));
        }

        // Apply sorting
        if (request.Order?.Any() == true)
        {
            foreach (DataTableOrderRequest order in request.Order)
            {
                filteredEmployees = order.Column switch
                {
                    0 => order.Dir == "asc" ? filteredEmployees.OrderBy(p => p.Name) : filteredEmployees.OrderByDescending(p => p.Name),
                    1 => order.Dir == "asc" ? filteredEmployees.OrderBy(p => p.Email) : filteredEmployees.OrderByDescending(p => p.Email),
                    2 => order.Dir == "asc" ? filteredEmployees.OrderBy(p => p.Age) : filteredEmployees.OrderByDescending(p => p.Age),
                    3 => order.Dir == "asc" ? filteredEmployees.OrderBy(p => p.Department) : filteredEmployees.OrderByDescending(p => p.Department),
                    4 => order.Dir == "asc" ? filteredEmployees.OrderBy(p => p.Salary) : filteredEmployees.OrderByDescending(p => p.Salary),
                    _ => filteredEmployees
                };
            }
        }

        int totalRecords = filteredEmployees.Count();
        List<Employee> pagedEmployees = filteredEmployees.Skip(request.Start).Take(request.Length).ToList();

        tableData = pagedEmployees.Select(p => new List<string> { p.Name, p.Email, p.Age.ToString(), p.Department, p.Salary.ToString("C") }).ToList();

        return new DataTableServerResponse
        {
            Data = tableData,
            TotalRecords = totalRecords,
            ContinuationToken = null
        };
    }

    public class Employee
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public int Age { get; set; }
        public string Department { get; set; } = string.Empty;
        public int Salary { get; set; }
    }
} 