@page "/loading-demo"
@using Microsoft.Extensions.Logging
@using Soenneker.Extensions.Task
@using Soenneker.Quark.Table.Demo.Services
@using Soenneker.Quark.Table.Demo.Dtos
@using Soenneker.Utils.Delay

@inject ILogger<LoadingDemo> Logger
@inject EmployeeService EmployeeService

<h3>Loading Behavior Demo</h3>

<p>This demo showcases the improved loading behavior. The table content stays visible while a loading overlay appears, preventing the jarring flickering effect.</p>

<div class="row" >
    <div class="col-12" >
        <div class="card" >
            <div class="card-header" >
                <h4>Employee Directory</h4>
                <p class="text-muted mb-0" >Try searching, sorting, or changing pages to see the smooth loading overlay</p>
            </div>
            <div class="card-body" >
                <QuarkTable @ref="_tableRef"
                            TotalRecords="@_totalRecords"
                            OnInteraction="HandleServerSideRequest" >

                    <QuarkTableSearch Placeholder="Search employees..." />

                    <QuarkTableLoader>
                    </QuarkTableLoader>

                    <QuarkTableElement>
                        <QuarkThead>
                            <QuarkTr>
                                <QuarkTh Sortable="true" Searchable="true" >Name</QuarkTh>
                                <QuarkTh Sortable="true" Searchable="true" >Department</QuarkTh>
                                <QuarkTh Sortable="true" Searchable="true" >Email</QuarkTh>
                                <QuarkTh Sortable="true" Searchable="true" >Salary</QuarkTh>
                                <QuarkTh Sortable="true" Searchable="true" >Hire Date</QuarkTh>
                                <QuarkTh Sortable="true" Searchable="true" >Status</QuarkTh>
                            </QuarkTr>
                        </QuarkThead>

                        <QuarkTbody>
                            @if (_currentEmployees is {Count: > 0})
                            {
                                @foreach (Employee employee in _currentEmployees)
                                {
                                    <QuarkTr Key="@employee.Id" >
                                        <QuarkTd>@employee.Name</QuarkTd>
                                        <QuarkTd>@employee.Department</QuarkTd>
                                        <QuarkTd>@employee.Email</QuarkTd>
                                        <QuarkTd>@employee.Salary.ToString("C")</QuarkTd>
                                        <QuarkTd>@employee.HireDate.ToString("MMM dd, yyyy")</QuarkTd>
                                        <QuarkTd>@employee.Status</QuarkTd>
                                    </QuarkTr>
                                }
                            }
                            else if (_hasLoadedOnce)
                            {
                                <QuarkTableNoData />
                            }
                        </QuarkTbody>
                    </QuarkTableElement>

                    <QuarkTableControls>
                        <QuarkTableInfo />
                        <QuarkTablePagination />
                    </QuarkTableControls>
                </QuarkTable>
            </div>
        </div>
    </div>
</div>

@code {
    private QuarkTable? _tableRef;
    private List<Employee> _currentEmployees = new();
    private bool _hasLoadedOnce = false;
    private int _totalRecords;

    private async Task HandleServerSideRequest(DataTableServerSideRequest request)
    {
        Logger.LogInformation("LoadingDemo: HandleServerSideRequest called: Start={Start}, Length={Length}", request.Start, request.Length);

        try
        {
            // Get filtered employees using the service
            List<Employee> employees = await EmployeeService.GetFilteredEmployees(request).NoSync();

            await DelayUtil.Delay(3000, Logger).NoSync();

            Logger.LogInformation("LoadingDemo: EmployeeService returned {Count} employees", employees.Count);

            // Update the current employees list
            _currentEmployees = employees;
            _hasLoadedOnce = true;



            // Trigger UI update
            StateHasChanged();

            Logger.LogInformation("LoadingDemo: Updated currentEmployees with {Count} records, totalRecords={TotalRecords}", _currentEmployees.Count, _totalRecords);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "LoadingDemo: Error handling server-side request: {Message}", ex.Message);
        }
    }

}