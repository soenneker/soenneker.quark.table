@page "/loading-demo"
@using Microsoft.Extensions.Logging
@using Soenneker.Quark.Table.Demo.Services
@using Soenneker.Quark.Table.Demo.Dtos
@using Soenneker.Utils.Delay

@inject ILogger<LoadingDemo> Logger
@inject EmployeeService EmployeeService

<PageTitle>Loading Demo - QuarkTable</PageTitle>

<Div class="demo-hero">
    <Div class="container">
        <Div class="row">
            <Div class="col-12 text-center">
                <Div class="hero-content">
                    <Div class="demo-icon">⚡</Div>
                    <h1 class="demo-title">Loading Behavior Demo</h1>
                    <p class="demo-subtitle">Smooth loading behavior with overlay that prevents jarring flickering effects.</p>
                </Div>
            </Div>
        </Div>
    </Div>
</Div>

<Div class="container">
    <Div class="demo-card">
        <Div class="card-header">
            <Div class="card-header-content">
                <h3><i class="fas fa-spinner me-2"></i>Employee Directory</h3>
                <p class="text-muted mb-0">Try searching, sorting, or changing pages to see the smooth loading overlay</p>
            </Div>
        </Div>
        <Div class="card-body">
            <QuarkTable @ref="_tableRef"
                        TotalRecords="@_totalRecords"
                        OnInteraction="HandleServerSideRequest" >

                <QuarkTableSearch Placeholder="Search employees..." />

                <QuarkTableLoader>
                </QuarkTableLoader>

                <QuarkTableElement>
                    <QuarkThead>
                        <QuarkTr>
                            <QuarkTh Sortable="true" Searchable="true" >Name</QuarkTh>
                            <QuarkTh Sortable="true" Searchable="true" >Department</QuarkTh>
                            <QuarkTh Sortable="true" Searchable="true" >Email</QuarkTh>
                            <QuarkTh Sortable="true" Searchable="true" >Salary</QuarkTh>
                            <QuarkTh Sortable="true" Searchable="true" >Hire Date</QuarkTh>
                            <QuarkTh Sortable="true" Searchable="true" >Status</QuarkTh>
                        </QuarkTr>
                    </QuarkThead>

                    <QuarkTbody>
                        @if (_currentEmployees is {Count: > 0})
                        {
                            @foreach (Employee employee in _currentEmployees)
                            {
                                <QuarkTr Key="@employee.Id" >
                                    <QuarkTd>@employee.Name</QuarkTd>
                                    <QuarkTd>@employee.Department</QuarkTd>
                                    <QuarkTd>@employee.Email</QuarkTd>
                                    <QuarkTd>@employee.Salary.ToString("C")</QuarkTd>
                                    <QuarkTd>@employee.HireDate.ToString("MMM dd, yyyy")</QuarkTd>
                                    <QuarkTd>@employee.Status</QuarkTd>
                                </QuarkTr>
                            }
                        }
                        else if (_tableRef.HasLoadedOnce)
                        {
                            <QuarkTableNoData>
                                <Div class="no-data-content">
                                    <Div class="no-data-icon">⚡</Div>
                                    <h4>No employees found</h4>
                                    <p>Try adjusting your search criteria or filters.</p>
                                </Div>
                            </QuarkTableNoData>
                        }
                    </QuarkTbody>
                </QuarkTableElement>

                <QuarkTableBottomBar>
                    <QuarkTableInfo />
                    <QuarkTablePagination />
                </QuarkTableBottomBar>
            </QuarkTable>
        </Div>
    </Div>
</Div>

@code {
    private QuarkTable? _tableRef;
    private List<Employee> _currentEmployees = new();
    private int _totalRecords;

    private async Task HandleServerSideRequest(DataTableServerSideRequest request)
    {
        Logger.LogInformation("LoadingDemo: HandleServerSideRequest called: Start={Start}, Length={Length}", request.Start, request.Length);

        try
        {
            // Get filtered employees using the service
            List<Employee> employees = await EmployeeService.GetFilteredEmployees(request);

            await DelayUtil.Delay(3000, Logger);

            Logger.LogInformation("LoadingDemo: EmployeeService returned {Count} employees", employees.Count);

            // Update the current employees list
            _currentEmployees = employees;

            // Trigger UI update
            StateHasChanged();

            Logger.LogInformation("LoadingDemo: Updated currentEmployees with {Count} records, totalRecords={TotalRecords}", _currentEmployees.Count, _totalRecords);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "LoadingDemo: Error handling server-side request: {Message}", ex.Message);
        }
    }

}
