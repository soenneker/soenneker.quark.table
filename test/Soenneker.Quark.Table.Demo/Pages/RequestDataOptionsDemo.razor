@page "/request-data-options-demo"
@using Soenneker.DataTables.Extensions.ServerSideRequest
@using Soenneker.Dtos.RequestDataOptions
@using Soenneker.Quark.Table.Demo.Dtos
@using Soenneker.Quark.Table.Demo.Services
@using Microsoft.Extensions.Logging
@using Soenneker.Extensions.Task
@using Soenneker.Quark.Table.Enums
@inject EmployeeService EmployeeService
@inject ILogger<RequestDataOptionsDemo> Logger

<PageTitle>RequestDataOptions Demo</PageTitle>

<h1>RequestDataOptions Demo</h1>
<p>This demo shows how to use the ToRequestDataOptions extension method with QuarkTable.</p>

<QuarkTable @ref="_table"
            Options="_tableOptions"
            TotalRecords="_totalRecords"
            OnInteraction="HandleManualRequest"
            OnInitialize="HandleInitialize" >

    <QuarkTableSearch></QuarkTableSearch>

    <QuarkTableElement>
        <QuarkThead>
            <QuarkTr>
                <QuarkTh Data="contact.name" Sortable="true" Searchable="true" >Name</QuarkTh>
                <QuarkTh Data="Department" Sortable="true" Searchable="true" >Department</QuarkTh>
                <QuarkTh Data="Email" Sortable="true" Searchable="true" >Email</QuarkTh>
                <QuarkTh Data="Salary" Sortable="true" Searchable="true" >Salary</QuarkTh>
                <QuarkTh Data="HireDate" Sortable="true" Searchable="true" >Hire Date</QuarkTh>
                <QuarkTh Data="Status" Sortable="true" Searchable="true" >Status</QuarkTh>
            </QuarkTr>
        </QuarkThead>

        <QuarkTbody>
            @if (_currentEmployees is {Count: > 0})
            {
                @foreach (var employee in _currentEmployees)
                {
                    <QuarkTr Key="@employee.Id" >
                        <QuarkTd>@employee.Name</QuarkTd>
                        <QuarkTd>@employee.Department</QuarkTd>
                        <QuarkTd>@employee.Email</QuarkTd>
                        <QuarkTd>@employee.Salary.ToString("C")</QuarkTd>
                        <QuarkTd>@employee.HireDate.ToString("MMM dd, yyyy")</QuarkTd>
                        <QuarkTd>@employee.Status</QuarkTd>
                    </QuarkTr>
                }
            }
            else
            {
                <QuarkTableNoData>
                    <div class="no-data" >
                        <h4>No employees found</h4>
                        <p>Try adjusting your search criteria.</p>
                    </div>
                </QuarkTableNoData>
            }
        </QuarkTbody>
    </QuarkTableElement>

    <QuarkTableControls>
        <QuarkTablePagination />
    </QuarkTableControls>
</QuarkTable>

@if (_lastRequestDataOptions != null)
{
    <div class="mt-4 p-4 bg-light" >
        <h4>Last RequestDataOptions:</h4>
        <pre>@_lastRequestDataOptionsJson</pre>
    </div>
}

@code {
    private QuarkTable? _table;
    private List<Employee> _currentEmployees = new();
    private RequestDataOptions? _lastRequestDataOptions;
    private string _lastRequestDataOptionsJson = "";

    private readonly QuarkTableOptions _tableOptions = new()
    {
        DefaultPageSize = 10,
        Sortable = true,
        SearchPosition = SearchPosition.End
    };

    private int _totalRecords;

    protected override async Task OnInitializedAsync()
    {
        _totalRecords = EmployeeService.GetTotalCount();
        Logger.LogInformation("RequestDataOptionsDemo: OnInitializedAsync - Initialized with {TotalRecords} total employee records", _totalRecords);
    }

    private async Task HandleManualRequest(DataTableServerSideRequest serverSideRequest)
    {
        Logger.LogInformation("RequestDataOptionsDemo: HandleManualRequest called: Request: Start={Start}, Length={Length}", serverSideRequest.Start, serverSideRequest.Length);

        try
        {
            // Convert the DataTableServerSideRequest to RequestDataOptions using the extension method
            var requestDataOptions = serverSideRequest.ToRequestDataOptions<Employee>();

            // Store for display
            _lastRequestDataOptions = requestDataOptions;
            _lastRequestDataOptionsJson = System.Text.Json.JsonSerializer.Serialize(requestDataOptions, new System.Text.Json.JsonSerializerOptions
            {
                WriteIndented = true
            });

            Logger.LogInformation("RequestDataOptionsDemo: Converted to RequestDataOptions: PageSize={PageSize}, Search='{Search}', SearchFields={SearchFieldsCount}, Filters={FiltersCount}, OrderBy={OrderByCount}", requestDataOptions.PageSize, requestDataOptions.Search, requestDataOptions.SearchFields?.Count ?? 0, requestDataOptions.Filters?.Count ?? 0, requestDataOptions.OrderBy?.Count ?? 0);

            // Get filtered employees using the EmployeeService
            List<Employee> employees = await EmployeeService.GetFilteredEmployees(serverSideRequest).NoSync();

            Logger.LogInformation("RequestDataOptionsDemo: Returned {Count} employees", employees.Count);

            // Update the current employees list
            _currentEmployees = employees;

            // Update the total records count
            _totalRecords = EmployeeService.GetTotalCount();

            // Trigger UI update
            StateHasChanged();

            Logger.LogInformation("RequestDataOptionsDemo: Updated currentEmployees with {Count} records, totalRecords={TotalRecords}", _currentEmployees.Count, _totalRecords);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "RequestDataOptionsDemo: Error handling manual request: {Message}", ex.Message);
        }
    }

    private async Task HandleInitialize()
    {
        Logger.LogInformation("RequestDataOptionsDemo: Table initialized");
    }

}