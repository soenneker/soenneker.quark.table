@page "/new-data-types"
@using Bogus
@using Microsoft.Extensions.Logging
@using Soenneker.DataTables.Dtos.ServerResponse
@using Soenneker.DataTables.Dtos.ServerSideRequest
@using Soenneker.Quark.Table.Enums
@using Soenneker.Utils.AutoBogus
@using Soenneker.Quark.Table.Demo.Services
@using Soenneker.Quark.Table.Demo.Dtos

@inject ILogger<NewDataTypesDemo> Logger
@inject EmployeeService EmployeeService

<PageTitle>New Data Types Demo - QuarkTable</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="display-4 mb-4">New Data Types Demo</h1>
            <p class="lead mb-4">Demonstrating QuarkTable's support for DataTableServerResponse objects and object-based data with separate headers.</p>
        </div>
    </div>

    <!-- DataTableServerResponse Demo -->
    <div class="row mb-5">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3><i class="fas fa-database"></i> DataTableServerResponse Demo</h3>
                    <p class="text-muted mb-0">Using DataTableServerResponse objects directly</p>
                </div>
                <div class="card-body">
                    <QuarkTable @ref="_serverResponseTable" 
                                ServerResponse="_serverResponse"
                                Headers="_headers"
                                Options="_options"
                                OnInitialize="OnTableInitialized"
                                OnSearch="OnSearch"
                                OnPageSizeChanged="OnPageSizeChanged"
                                OnGoToPage="OnGoToPage"
                                OnOrder="OnOrder" />
                </div>
            </div>
        </div>
    </div>

    <!-- Object Data Demo -->
    <div class="row mb-5">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3><i class="fas fa-object-group"></i> Object Data Demo</h3>
                    <p class="text-muted mb-0">Using List&lt;object&gt; with separate headers</p>
                </div>
                <div class="card-body">
                    <QuarkTable @ref="_objectDataTable" 
                                ObjectData="_objectData"
                                Headers="_objectHeaders"
                                ObjectDataProperties="_objectProperties"
                                Options="_options"
                                OnInitialize="OnTableInitialized"
                                OnSearch="OnSearch"
                                OnPageSizeChanged="OnPageSizeChanged"
                                OnGoToPage="OnGoToPage"
                                OnOrder="OnOrder" />
                </div>
            </div>
        </div>
    </div>

    <!-- Combined vs Separate Headers Demo -->
    <div class="row mb-5">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h4><i class="fas fa-list"></i> Combined Headers (Old Way)</h4>
                    <p class="text-muted mb-0">Headers included in data rows</p>
                </div>
                <div class="card-body">
                    <QuarkTable @ref="_combinedHeadersTable" 
                                DirectData="_combinedHeadersData"
                                Options="_options"
                                OnInitialize="OnTableInitialized" />
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h4><i class="fas fa-columns"></i> Separate Headers (New Way)</h4>
                    <p class="text-muted mb-0">Headers specified separately</p>
                </div>
                <div class="card-body">
                    <QuarkTable @ref="_separateHeadersTable" 
                                DirectData="_separateHeadersData"
                                Headers="_separateHeaders"
                                Options="_options"
                                OnInitialize="OnTableInitialized" />
                </div>
            </div>
        </div>
    </div>

    <!-- Controls -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h3><i class="fas fa-cogs"></i> Controls</h3>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <button @onclick="RefreshServerResponseData" class="btn btn-primary w-100 mb-2">
                                <i class="fas fa-sync"></i> Refresh Server Response
                            </button>
                        </div>
                        <div class="col-md-3">
                            <button @onclick="RefreshObjectData" class="btn btn-success w-100 mb-2">
                                <i class="fas fa-sync"></i> Refresh Object Data
                            </button>
                        </div>
                        <div class="col-md-3">
                            <button @onclick="ClearAllTables" class="btn btn-warning w-100 mb-2">
                                <i class="fas fa-trash"></i> Clear All Tables
                            </button>
                        </div>
                        <div class="col-md-3">
                            <button @onclick="ResetAllTables" class="btn btn-info w-100 mb-2">
                                <i class="fas fa-undo"></i> Reset All Tables
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private QuarkTable? _serverResponseTable;
    private QuarkTable? _objectDataTable;
    private QuarkTable? _combinedHeadersTable;
    private QuarkTable? _separateHeadersTable;

    private DataTableServerResponse? _serverResponse;
    private List<object>? _objectData;
    private List<List<string>>? _combinedHeadersData;
    private List<List<string>>? _separateHeadersData;

    private readonly List<string> _headers = ["ID", "Name", "Email", "Department", "Salary", "Hire Date", "Status"];
    private readonly List<string> _objectHeaders = ["ID", "Name", "Email", "Department", "Salary", "Hire Date", "Status"];
    private readonly List<string> _objectProperties = ["Id", "Name", "Email", "Department", "Salary", "HireDate", "Status"];
    private readonly List<string> _separateHeaders = ["ID", "Name", "Email", "Department", "Salary", "Hire Date", "Status"];

    private readonly QuarkTableOptions _options = new()
    {
        DefaultPageSize = 10,
        PageSizeOptions = [5, 10, 25, 50],
        ShowSearch = true,
        ShowPagination = true,
        ShowPageSizeSelector = true,
        ShowInfo = true,
        Sortable = true,
        SearchPosition = SearchPosition.End,
        SearchPlaceholder = "Search employees...",
        SearchDebounceMs = 300,
        MaxPageButtons = 5
    };

    private readonly AutoFaker _autoFaker = new();

    protected override void OnInitialized()
    {
        GenerateServerResponseData();
        GenerateObjectData();
        GenerateCombinedHeadersData();
        GenerateSeparateHeadersData();
    }

    private void GenerateServerResponseData()
    {
        List<Employee> employees = GenerateEmployees();
        List<List<string>> data = employees.Select(e => new List<string>
        {
            e.Id.ToString(),
            e.Name,
            e.Email,
            e.Department,
            e.Salary.ToString("C"),
            e.HireDate.ToString("yyyy-MM-dd"),
            e.Status
        }).ToList();

        _serverResponse = DataTableServerResponse.Success(
            draw: 1,
            recordsTotal: data.Count,
            recordsFiltered: data.Count,
            data: data
        );
    }

    private void GenerateObjectData()
    {
        _objectData = GenerateEmployees().Cast<object>().ToList();
    }

    private void GenerateCombinedHeadersData()
    {
        List<Employee> employees = GenerateEmployees();
        _combinedHeadersData = [new List<string> {"ID", "Name", "Email", "Department", "Salary", "Hire Date", "Status"}];

        // Add data rows
        foreach (Employee employee in employees)
        {
            _combinedHeadersData.Add([
                employee.Id.ToString(),

                employee.Name,

                employee.Email,

                employee.Department,

                employee.Salary.ToString("C"),

                employee.HireDate.ToString("yyyy-MM-dd"),

                employee.Status
            ]);
        }
    }

    private void GenerateSeparateHeadersData()
    {
        List<Employee> employees = GenerateEmployees();
        _separateHeadersData = [];

        // Only data rows, no headers
        foreach (Employee employee in employees)
        {
            _separateHeadersData.Add([
                employee.Id.ToString(),

                employee.Name,

                employee.Email,

                employee.Department,

                employee.Salary.ToString("C"),

                employee.HireDate.ToString("yyyy-MM-dd"),

                employee.Status
            ]);
        }
    }

    private List<Employee> GenerateEmployees()
    {
        var employees = new List<Employee>();
        Faker<Employee>? faker = new Faker<Employee>()
                                 .RuleFor(e => e.Id, f => f.IndexGlobal + 1)
                                 .RuleFor(e => e.Name, f => f.Name.FullName())
                                 .RuleFor(e => e.Email, (f, e) => f.Internet.Email(e.Name))
                                 .RuleFor(e => e.Department, f => f.Commerce.Department())
                                 .RuleFor(e => e.Salary, f => f.Random.Decimal(30000, 150000))
                                 .RuleFor(e => e.HireDate, f => f.Date.Past(5))
                                 .RuleFor(e => e.Status, f => f.PickRandom("Active", "Inactive", "Pending"));

        for (int i = 0; i < 25; i++)
        {
            employees.Add(faker.Generate());
        }

        return employees;
    }

    private void OnTableInitialized()
    {
        Logger.LogInformation("Table initialized");
    }

    private void OnSearch(string searchTerm)
    {
        Logger.LogInformation("Search: {SearchTerm}", searchTerm);
    }

    private void OnPageSizeChanged(int pageSize)
    {
        Logger.LogInformation("Page size changed: {PageSize}", pageSize);
    }

    private void OnGoToPage(int page)
    {
        Logger.LogInformation("Go to page: {Page}", page);
    }

    private void OnOrder(QuarkTableOrderEventArgs args)
    {
        Logger.LogInformation("Order changed: Column={Column}, Direction={Direction}", args.Column, args.Direction);
    }

    private void RefreshServerResponseData()
    {
        GenerateServerResponseData();
        StateHasChanged();
    }

    private void RefreshObjectData()
    {
        GenerateObjectData();
        StateHasChanged();
    }

    private void ClearAllTables()
    {
        _serverResponse = null;
        _objectData = null;
        _combinedHeadersData = null;
        _separateHeadersData = null;
        StateHasChanged();
    }

    private void ResetAllTables()
    {
        GenerateServerResponseData();
        GenerateObjectData();
        GenerateCombinedHeadersData();
        GenerateSeparateHeadersData();
        StateHasChanged();
    }
} 