@page "/basic"
@using Microsoft.Extensions.Logging
@using Soenneker.Quark.Table.Enums
@using Soenneker.Quark.Table.Demo.Services
@using Soenneker.Quark.Table.Demo.Dtos

@inject ILogger<BasicDemo> Logger
@inject EmployeeService EmployeeService

<PageTitle>Basic Demo - QuarkTable</PageTitle>

<div class="container-fluid" >
    <div class="row" >
        <div class="col-12" >
            <h3>Basic QuarkTable Demo</h3>
            <p class="text-muted mb-4" >A simple demonstration of QuarkTable with basic features including search, sorting, and pagination. The search is now integrated directly above the table headers.</p>
        </div>
    </div>

    <div class="row" >
        <div class="col-12" >
            <div class="card" >
                <div class="card-body" >
                    <QuarkTable @ref="basicTable"
                                OnManualRequest="HandleManualRequest"
                                OnOrder="HandleOrder"
                                OnInitialize="HandleInitialize"
                                Options="basicTableOptions"
                                TotalRecords="@totalRecords" >

                        <QuarkTableSearch></QuarkTableSearch>

                        <QuarkTableElement>
                            <QuarkThead>
                                <QuarkTr>
                                    <QuarkTh ColumnIndex="0" ColumnName="Name" Sortable="true" >Name</QuarkTh>
                                    <QuarkTh ColumnIndex="1" ColumnName="Department" Sortable="true" >Department</QuarkTh>
                                    <QuarkTh ColumnIndex="2" ColumnName="Email" Sortable="true" >Email</QuarkTh>
                                    <QuarkTh ColumnIndex="3" ColumnName="Salary" Sortable="true" >Salary</QuarkTh>
                                    <QuarkTh ColumnIndex="4" ColumnName="HireDate" Sortable="true" >Hire Date</QuarkTh>
                                    <QuarkTh ColumnIndex="5" ColumnName="Status" Sortable="true" >Status</QuarkTh>
                                </QuarkTr>
                            </QuarkThead>

                            <QuarkTbody>
                                @if (currentEmployees is {Count: > 0})
                                {
                                    @foreach (Employee employee in currentEmployees)
                                    {
                                        <QuarkTr Key="@employee.Id" >
                                            <QuarkTd>@employee.Name</QuarkTd>
                                            <QuarkTd>@employee.Department</QuarkTd>
                                            <QuarkTd>@employee.Email</QuarkTd>
                                            <QuarkTd>@employee.Salary.ToString("C")</QuarkTd>
                                            <QuarkTd>@employee.HireDate.ToString("MMM dd, yyyy")</QuarkTd>
                                            <QuarkTd>@employee.Status</QuarkTd>
                                        </QuarkTr>
                                    }
                                }
                                else
                                {
                                    <QuarkTr>
                                        <QuarkTd colspan="6" class="text-center" >No data available</QuarkTd>
                                    </QuarkTr>
                                }
                            </QuarkTbody>
                        </QuarkTableElement>
                        <QuarkTablePagination />
                    </QuarkTable>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private QuarkTable? basicTable;
    private List<Employee> currentEmployees = new();

    private QuarkTableOptions basicTableOptions = new()
    {
        DefaultPageSize = 10,
        Sortable = true,
        SearchPosition = SearchPosition.End
    };

    private int totalRecords; // Start with 0 and update when data is loaded

    protected override async Task OnInitializedAsync()
    {
        // Initialize total records from the service
        totalRecords = EmployeeService.GetTotalCount();
        Logger.LogInformation("BasicDemo: OnInitializedAsync - Initialized with {TotalRecords} total records", totalRecords);

        // Test the service directly
        List<Employee> testEmployees = EmployeeService.GetAllEmployees();
        Logger.LogInformation("BasicDemo: OnInitializedAsync - EmployeeService.GetAllEmployees() returned {Count} employees", testEmployees.Count);
    }

    private async Task HandleManualRequest(DataTableServerSideRequest serverSideRequest)
    {
        Logger.LogInformation("BasicDemo: HandleManualRequest called: basicTable is {IsNull}, Request: Start={Start}, Length={Length}", basicTable == null ? "null" : "not null", serverSideRequest.Start, serverSideRequest.Length);

        try
        {
            // Get filtered employees using the service
            List<Employee> employees = await EmployeeService.GetFilteredEmployees(serverSideRequest);

            Logger.LogInformation("BasicDemo: EmployeeService returned {Count} employees", employees.Count);

            // Update the current employees list
            currentEmployees = employees;

            // Update the total records count
            totalRecords = EmployeeService.GetTotalCount();

            // Trigger UI update
            StateHasChanged();

            Logger.LogInformation("BasicDemo: Updated currentEmployees with {Count} records, totalRecords={TotalRecords}", currentEmployees.Count, totalRecords);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "BasicDemo: Error handling manual request: {Message}", ex.Message);
        }
    }

    private async Task HandleSearch(string searchTerm)
    {
        Logger.LogInformation("Search performed: {SearchTerm}", searchTerm);
    }

    private async Task HandleOrder(QuarkTableOrderEventArgs args)
    {
        Logger.LogInformation("Column '{Column}' sorted {Direction}", args.Column, args.Direction);
    }

    private async Task HandleInitialize()
    {
        Logger.LogInformation("Basic table initialized");
    }

    private async Task HandleDestroy()
    {
        Logger.LogInformation("Basic table destroyed");
    }

}