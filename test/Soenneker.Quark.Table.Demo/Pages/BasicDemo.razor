@page "/basic"
@using Microsoft.Extensions.Logging
@using Soenneker.Quark.Table.Enums
@using Soenneker.Quark.Table.Demo.Services
@using Soenneker.Quark.Table.Demo.Dtos

@inject ILogger<BasicDemo> Logger
@inject EmployeeService EmployeeService

<PageTitle>Basic Demo - QuarkTable</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h3>Basic QuarkTable Demo</h3>
            <p class="text-muted mb-4">A simple demonstration of QuarkTable with basic features including search, sorting, and pagination.</p>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <QuarkTable @ref="_basicTable"
                                OnInteraction="HandleManualRequest"
                                OnOrder="HandleOrder"
                                OnInitialize="HandleInitialize"
                                Options="_basicTableOptions"
                                TotalRecords="@_totalRecords">

                        <QuarkTableSearch Placeholder="Search employees..."></QuarkTableSearch>

                        <QuarkTableElement>
                            <QuarkThead>
                                <QuarkTr>
                                    <QuarkTh Data="Name" Sortable="true" Searchable="true">Name</QuarkTh>
                                    <QuarkTh Data="test.dept" Sortable="true" Searchable="true">Department</QuarkTh>
                                    <QuarkTh Data="Email" Sortable="true" Searchable="true">Email</QuarkTh>
                                    <QuarkTh Data="Salary" Sortable="true" Searchable="true">Salary</QuarkTh>
                                    <QuarkTh Data="HireDate" Sortable="true" Searchable="true">Hire Date</QuarkTh>
                                    <QuarkTh Data="Status" Sortable="true" Searchable="true">Status</QuarkTh>
                                </QuarkTr>
                            </QuarkThead>

                            <QuarkTbody>
                                @if (_currentEmployees is {Count: > 0})
                                {
                                    @foreach (Employee employee in _currentEmployees)
                                    {
                                        <QuarkTr Key="@employee.Id">
                                            <QuarkTd>@employee.Name</QuarkTd>
                                            <QuarkTd>@employee.Department</QuarkTd>
                                            <QuarkTd>@employee.Email</QuarkTd>
                                            <QuarkTd>@employee.Salary.ToString("C")</QuarkTd>
                                            <QuarkTd>@employee.HireDate.ToString("MMM dd, yyyy")</QuarkTd>
                                            <QuarkTd>@employee.Status</QuarkTd>
                                        </QuarkTr>
                                    }
                                }
                                else if (_hasLoadedOnce)
                                {
                                    <QuarkTableNoData>
                                        <div style="text-align: center; padding: 2rem;">
                                            <h4>No employees found</h4>
                                            <p>Try adjusting your search criteria or filters.</p>
                                        </div>
                                    </QuarkTableNoData>
                                }
                            </QuarkTbody>
                        </QuarkTableElement>
                        
                        <QuarkTableControls>
                            <QuarkTableInfo />
                            <QuarkTablePagination />
                        </QuarkTableControls>
                    </QuarkTable>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private QuarkTable? _basicTable;
    private List<Employee> _currentEmployees = new();
    private bool _hasLoadedOnce = false;

    private readonly QuarkTableOptions _basicTableOptions = new()
    {
        DefaultPageSize = 10,
        Sortable = true,
        SearchPosition = SearchPosition.End
    };

    private int _totalRecords;

    protected override async Task OnInitializedAsync()
    {
        // Initialize total records from the service
        _totalRecords = EmployeeService.GetTotalCount();
        Logger.LogInformation("BasicDemo: OnInitializedAsync - Initialized with {TotalRecords} total records", _totalRecords);

        // Test the service directly
        List<Employee> testEmployees = EmployeeService.GetAllEmployees();
        Logger.LogInformation("BasicDemo: OnInitializedAsync - EmployeeService.GetAllEmployees() returned {Count} employees", testEmployees.Count);
    }

    private async Task HandleManualRequest(DataTableServerSideRequest serverSideRequest)
    {
        Logger.LogInformation("BasicDemo: HandleManualRequest called: basicTable is {IsNull}, Request: Start={Start}, Length={Length}", _basicTable == null ? "null" : "not null", serverSideRequest.Start, serverSideRequest.Length);
        
        // Log columns information if available
        if (serverSideRequest.Columns != null && serverSideRequest.Columns.Count > 0)
        {
            Logger.LogInformation("BasicDemo: Request includes {ColumnCount} columns:", serverSideRequest.Columns.Count);
            foreach (var column in serverSideRequest.Columns)
            {
                Logger.LogInformation("  Column: Data='{Data}', Name='{Name}', Searchable={Searchable}, Orderable={Orderable}", 
                    column.Data ?? "null", column.Name ?? "null", column.Searchable, column.Orderable);
            }
        }
        else
        {
            Logger.LogInformation("BasicDemo: Request has no columns information");
        }

        try
        {
            // Get filtered employees using the service
            List<Employee> employees = await EmployeeService.GetFilteredEmployees(serverSideRequest);

            Logger.LogInformation("BasicDemo: EmployeeService returned {Count} employees", employees.Count);

            // Update the current employees list
            _currentEmployees = employees;
            _hasLoadedOnce = true;

            // Update the total records count
            _totalRecords = EmployeeService.GetTotalCount();

            // Trigger UI update
            StateHasChanged();

            Logger.LogInformation("BasicDemo: Updated currentEmployees with {Count} records, totalRecords={TotalRecords}", _currentEmployees.Count, _totalRecords);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "BasicDemo: Error handling manual request: {Message}", ex.Message);
        }
    }

    private async Task HandleOrder(QuarkTableOrderEventArgs args)
    {
        Logger.LogInformation("Column '{Column}' sorted {Direction}", args.Column, args.Direction);
    }

    private async Task HandleInitialize()
    {
        Logger.LogInformation("Basic table initialized");
    }
}